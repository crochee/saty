// Code generated by MockGen. DO NOT EDIT.
// Source: ./event.go

// Package redisx is a generated GoMock package.
package redisx

import (
	context "context"
	reflect "reflect"

	v8 "github.com/go-redis/redis/v8"
	gomock "github.com/golang/mock/gomock"

	registry "template/pkg/registry"
)

// MockEncoder is a mock of Encoder interface.
type MockEncoder struct {
	ctrl     *gomock.Controller
	recorder *MockEncoderMockRecorder
}

// MockEncoderMockRecorder is the mock recorder for MockEncoder.
type MockEncoderMockRecorder struct {
	mock *MockEncoder
}

// NewMockEncoder creates a new mock instance.
func NewMockEncoder(ctrl *gomock.Controller) *MockEncoder {
	mock := &MockEncoder{ctrl: ctrl}
	mock.recorder = &MockEncoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncoder) EXPECT() *MockEncoderMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockEncoder) Decode(data string) (Action, *registry.Info, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", data)
	ret0, _ := ret[0].(Action)
	ret1, _ := ret[1].(*registry.Info)
	ret2, _ := ret[2].(int64)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Decode indicates an expected call of Decode.
func (mr *MockEncoderMockRecorder) Decode(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockEncoder)(nil).Decode), data)
}

// Encode mocks base method.
func (m *MockEncoder) Encode(action Action, info *registry.Info, expireAt int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", action, info, expireAt)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encode indicates an expected call of Encode.
func (mr *MockEncoderMockRecorder) Encode(action, info, expireAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockEncoder)(nil).Encode), action, info, expireAt)
}

// MockEventFlow is a mock of EventFlow interface.
type MockEventFlow struct {
	ctrl     *gomock.Controller
	recorder *MockEventFlowMockRecorder
}

// MockEventFlowMockRecorder is the mock recorder for MockEventFlow.
type MockEventFlowMockRecorder struct {
	mock *MockEventFlow
}

// NewMockEventFlow creates a new mock instance.
func NewMockEventFlow(ctrl *gomock.Controller) *MockEventFlow {
	mock := &MockEventFlow{ctrl: ctrl}
	mock.recorder = &MockEventFlowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventFlow) EXPECT() *MockEventFlowMockRecorder {
	return m.recorder
}

// Change mocks base method.
func (m *MockEventFlow) Change(ctx context.Context, msg *v8.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Change", ctx, msg)
}

// Change indicates an expected call of Change.
func (mr *MockEventFlowMockRecorder) Change(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Change", reflect.TypeOf((*MockEventFlow)(nil).Change), ctx, msg)
}

// MockKeyGenerator is a mock of KeyGenerator interface.
type MockKeyGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockKeyGeneratorMockRecorder
}

// MockKeyGeneratorMockRecorder is the mock recorder for MockKeyGenerator.
type MockKeyGeneratorMockRecorder struct {
	mock *MockKeyGenerator
}

// NewMockKeyGenerator creates a new mock instance.
func NewMockKeyGenerator(ctrl *gomock.Controller) *MockKeyGenerator {
	mock := &MockKeyGenerator{ctrl: ctrl}
	mock.recorder = &MockKeyGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyGenerator) EXPECT() *MockKeyGeneratorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockKeyGenerator) Create(info *registry.Info) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", info)
	ret0, _ := ret[0].(string)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockKeyGeneratorMockRecorder) Create(info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockKeyGenerator)(nil).Create), info)
}
